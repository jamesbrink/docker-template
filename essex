#!/usr/bin/env bash
# shellcheck disable=SC2034

# Setup the Essex Path
ESSEX_PATH="$(cd "$(dirname "$0")" ; pwd -P )" || exit 1

# Set Colors
bold=$(tput bold)
reset=$(tput sgr0)
purple=$(tput setaf 171)
red=$(tput setaf 1)
green=$(tput setaf 76)
tan=$(tput setaf 3)
blue=$(tput setaf 38)
underline=$(tput sgr 0 1)

# Print usage information
usage() {
	cat <<-EOF
		 ${bold}Essex $(version): Boilerplate for Docker Based Projects.${reset}
		 License: MIT Copyright (c) 2019 Utensils Union
		
		 Usage:
		 	essex list
		 	essex new <template> <ProjectName>
		 	essex update
		
		 Examples:
		  	essex new basic MyApp
		
	EOF
}

# Print version information
version() {
	git describe --tags --abbrev=0 2>/dev/null || git rev-parse --abbrev-ref HEAD
}

# List available templates
list(){
	echo "Available templates:"
	for template in "$ESSEX_PATH"/templates/*
	do
		if [ -f "$template"/.description ]
		then
			echo "  ${bold}$(basename "$template")${reset} - $(cat "$template"/.description)"
		else
			echo "  ${bold}$(basename "$template")${reset}"
		fi
	done
}

update(){
	echo "Updating Essex"
	git --git-dir="$ESSEX_PATH"/.git pull origin
}

# Create a new project from a template
new(){
	local template="$2"
	local project="$3"

	echo "Creating new project $project using template: $template"
	mkdir -p "$project"
	cd "$project" || exit 1
	git init
	cp -rv "$ESSEX_PATH"/templates/"$template"/* ./
}

# Parse any subcommands
while true; do
  case "$1" in
    list) list; exit $? ;;
	new) new "$@"; exit $? ;;
	update) update; exit $? ;;
    * ) usage; exit 0 ;;
  esac
done

# Parse short and long options
OPTS=$(getopt -o vh: --long verbose,help: -n 'parse-options' -- "$@")

# shellcheck disable=SC2181
if [ $? != 0 ]
then 
	echo "Failed parsing options." >&2
	exit 1
fi

eval set -- "$OPTS"

VERBOSE=false

while true; do
  case "$1" in
    -v | --verbose ) VERBOSE=true; shift ;;
    -h | --help ) usage;break;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

exit 0
