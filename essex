#!/usr/bin/env bash
# shellcheck disable=SC2034

# Setup the Essex Path
ESSEX_PATH="$(cd "$(dirname "$0")" ; pwd -P )" || exit 1

# Set Colors
bold=$(tput bold)
reset=$(tput sgr0)
purple=$(tput setaf 171)
red=$(tput setaf 1)
green=$(tput setaf 76)
tan=$(tput setaf 3)
blue=$(tput setaf 38)
underline=$(tput sgr 0 1)

# Print usage information
usage() {
	cat <<-EOF
		 ${bold}Essex $(version): Boilerplate for Docker Based Projects.${reset}
		 License: MIT Copyright (c) 2019 Utensils Union
		
		 Usage:
		 	essex list
		 	essex new <template> <ProjectName> [OPTION]...
		 	essex update

		 Options:
		 	-v, --vendor [NAME]		Sets the vendor name of the project.

		 Examples:
		  	essex new basic MyApp
		 	essex new basic MyApp --vendor utensils

		
	EOF
}

# Print version information
version() {
	git --git-dir="$ESSEX_PATH"/.git describe --tags --abbrev=0 2>/dev/null \
		|| git --git-dir="$ESSEX_PATH"/.git rev-parse --abbrev-ref HEAD
}

# List available templates
list(){
	echo "Available templates:"
	for template in "$ESSEX_PATH"/templates/*
	do
		if [ -f "$template"/.description ]
		then
			echo "  ${bold}$(basename "$template")${reset} - $(cat "$template"/.description)"
		fi
	done
}

# Update Essex
update(){
	echo "Updating Essex"
	git --git-dir="$ESSEX_PATH"/.git pull origin
}

# Collect maintainer name from git
maintainer(){
	user_name="$(git config user.name)"
	email="$(git config user.email)"
	echo "$user_name <$email>"
}

# Update the project's maintainer
project_maintainer(){
	local maintainer="$1"
	sed -i 's/org.opencontainers.image.authors=.* \\/org.opencontainers.image.authors="'"$maintainer"'" \\/g' Dockerfile
}

# Update the project's name
project_name(){
	local name="$1"
	sed -r -i 's/(^IMAGE_NAME.+\?= ).+$/\1'"${name,,}"'/g' Makefile
	sed -i 's/org.opencontainers.image.title=.* \\/org.opencontainers.image.title="'"$name"'" \\/g' Dockerfile
	sed -r -i 's/^# .*/# '"$name"'/g' README.md
	sed -r -i 's|/template|/'"${name,,}"'|g' README.md
}

# Update the projects vendor
project_vendor(){
	local vendor="$1"
	echo "Setting Vendor: $vendor"
	sed -r -i 's/(^DOCKER_NAMESPACE.+\?= ).+$/\1'"${vendor,,}"'/g' Makefile
	sed -i 's/org.opencontainers.image.vendor=.* \\/org.opencontainers.image.vendor="'"$vendor"'" \\/g' Dockerfile
	sed -r -i 's|utensils|'"${vendor,,}"'|g' README.md
	
	git add .
}

# Create a new project from a template
new(){
	local template="$2"
	local project="$3"

	# Make sure the user passed in an active template
	if [ ! -f "$ESSEX_PATH"/templates/"$template"/.description ]
	then
		echo "No template named: $template"
		list
		exit 1
	fi

	echo "Creating new project $project using template: $template"
	mkdir -p "$project"
	cd "$project" || exit 1

	# If this is not already a git project lets init one now
	if [ ! -d ".git" ]
	then
		git init
	fi

	# Copy the template files into the project
	cp -r "$ESSEX_PATH"/templates/"$template"/. ./

	project_maintainer "$(maintainer)"
	project_name "$project"

	git add .
	# git status
}

# Parse any subcommands
while true; do
  case "$1" in
    list) list; exit $? ;;
	new) new "$@"; shift 3 ; break ;;
	update) update; exit $? ;;
    * ) usage; exit 0 ;;
  esac
done

# Parse short and long options
OPTS=$(getopt -o vh: --long vendor,help: -n 'parse-options' -- "$@")

# shellcheck disable=SC2181
if [ $? != 0 ]
then 
	echo "Failed parsing options." >&2
	exit 1
fi

eval set -- "$OPTS"

while true; do
  case "$1" in
    -v | --vendor ) shift 2; project_vendor "$1" ;;
    -h | --help ) usage;break;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done

exit 0
